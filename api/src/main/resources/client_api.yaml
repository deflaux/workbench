# Endpoints in this API are intended to be used by researchers in notebooks; make sure they
# are extra-well documented and designed and that we do not break backwards compatibility!

# For separate validation (with some false positives), do:
#     ./project.rb validate-swagger
swagger: '2.0'
info:
  version: "0.1.0"
  title: "AllOfUs Client API"
  description: "The API used by AllOfUs workbench clients (including both notebooks and our UI.)"
  termsOfService: "http://www.pmi-ops.org/terms_of_service.html"
  contact:
    name: "developer_help@pmi-ops.org"
  license:
    name: "BSD"
host: "api.pmi-ops.org"
securityDefinitions:
  # Establish the fact that *some endpoints* are OAuth protected
  # by defining an `aou_oauth` security mode, which we'll assing
  # to any protected endpoints below.
  aou_oauth:
    # TODO: Vet/fix this token and/or authorization URL to work in practice.
    # These are currently included simply to satisfy the Swagger specification,
    # as this is not directly used to dictate oauth details (just used to
    # annotate which methods require oauth).
    authorizationUrl: ""
    tokenUrl: ""
    type: oauth2
    flow: accessCode
schemes:
  - "https"
produces:
  - "application/json"
# Establish the fact that all endpoints are protected: this annotation
# ensures that client libraries know to send bearer tokens when calling
security:
  - aou_oauth: []

## Common Path Parameters
parameters:
  workspaceNamespace:
    in: path
    name: workspaceNamespace
    type: string
    description: The Workspace namespace
    required: true
  workspaceId:
    in: path
    name: workspaceId
    type: string
    description: The Workspace ID (a.k.a. the workspace's Firecloud name)
    required: true

paths:

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - cohorts
      description: >
        Translates a data table specification into a SQL query to run against the CDR.
      operationId: "getDataTableQuery"
      parameters:
        - in: body
          name: request
          description: a query specification for a data table
          schema:
            $ref: "#/definitions/DataTableSpecification"
      responses:
        200:
          description: the query to run against the CDR to retrieve the data
          schema:
            $ref: "#/definitions/CdrQuery"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - cohorts
      description: >
        Retrieves annotations for a cohort in the workspace
      operationId: "getCohortAnnotations"
      parameters:
        - in: body
          name: request
          description: a request indicating what annotations to retrieve
          schema:
            $ref: "#/definitions/CohortAnnotationsRequest"
      responses:
        200:
          description: the requested annotations
          schema:
            $ref: "#/definitions/CohortAnnotationsResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts:
      post:
        tags:
          - concepts
        description: >
          Searches for concepts in concept table by name, and optionally filter on
          domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated
          with the workspace specified in the path.
        operationId: "searchConcepts"
        parameters:
          - $ref: '#/parameters/workspaceNamespace'
          - $ref: '#/parameters/workspaceId'
          - in: body
            name: request
            description: concept search request
            schema:
              $ref: "#/definitions/SearchConceptsRequest"
        responses:
          200:
            description: A collection of concepts
            schema:
              $ref: "#/definitions/ConceptListResponse"

definitions:

  DataTableSpecification:
    type: object
    properties:
      cohortName:
        description: >
         The name of a cohort that data should be retrieved for. This and cohortSpec should not
         be used at the same time. If neither cohortName nor cohortSpec are specified, data will
         be extracted for everyone in the CDR.
        type: string
      cohortSpec:
        description: >
          JSON representation of a cohort to be evaluated (using the same format used for saved
          cohorts). This and cohortName should not be used at the same time. If neither cohortName
          nor cohortSpec are specified, data will be extracted for everyone in the CDR.
        type: string
      statusFilter:
        description: >
          An array of status values; participants with these statuses will be included.
          Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.
          Only valid for use with cohortName (cohorts saved in the database.)
        type: array
        items:
          $ref: "#/definitions/CohortStatus"
      cdrVersionName:
        description: >
          The name of a CDR version to use when evaluating the cohort; if none is specified,
          the CDR version currently associated with the workspace will be used
        type: string
      tableQuery:
        description: >
            A query specifying how to pull data out of a single table. If tableQuery is not
            specified, just Person.person_id will be extracted.
        $ref: "#/definitions/TableQuery"

  CdrQuery:
    type: object
    required:
      - sql
      - bigqueryProject
      - bigqueryDataset

    properties:
      sql:
        description: Google SQL to use when querying the CDR
        type: string
      parameters:
        description: named query parameters used when executing the above SQL
        type: array
        items:
          $ref: "#/definitions/CdrQueryParameter"
      bigqueryProject:
        description: name of the Google Cloud project containing the CDR dataset
        type: string
      bigqueryDataset:
        description: name of the CDR BigQuery dataset
        type: string

  CdrQueryParameter:
    type: object
    required:
      - name
    description: A query parameter and value. One (and only one) of the value fields should be set.
    properties:
      name:
        description: the name of the parameter
        type: string
      values:
        description: An array of string values for this parameter. (It may contain just one value.)
        type: array
        items:
          type: string
      valueDate:
        description: A date (yyyy-MM-dd) value for this parameter
        type: string
      valueDatetime:
        description: A datetime (yyyy-MM-dd HH:mm:ss zzz) value for this parameter
        type: string
      valueNumbers:
        description: An array of number values for this parameter. (It may contain just one value.)
        type: array
        items:
          type: number

  CohortAnnotationsRequest:
    type: object
    required:
      - cohortName
    properties:
      cohortName:
        description: >
         The name of a cohort that annotations should be retrieved for.
        type: string
      statusFilter:
        description: >
          An array of status values; participants with these statuses will have their annotations
          retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] --
          everything but EXCLUDED.
        type: array
        items:
          $ref: "#/definitions/CohortStatus"
      cdrVersionName:
        description: >
          The name of a CDR version to use when retrieving annotations; if none is specified,
          the CDR version currently associated with the workspace will be used
        type: string
      annotationQuery:
        description: >
          Specification defining what annotations to retrieve.
        $ref: "#/definitions/AnnotationQuery"

  CohortAnnotationsResponse:
    type: object
    required:
      - results
    properties:
      results:
        description: >
          An array of JSON dictionaries, with each dictionary representing the requested
          annotations and/or review status for a single person.
          (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a
          list[object] where each object is a dictionary. In Typescript clients, this is an
          Array<any> where each object is a dictionary.) Keys in the dictionaries will be
          "person_id", "review_status", or the name of an annotation.
        type: array
        items:
          type: object

  TableQuery:
    type: object
    description: >
      A specification for retrieving data from a single table.
    required:
      - tableName
    properties:
      tableName:
        description: >
          The name of a table containing a person_id column to retrieve data from (e.g. person, observation);
          should be in the OMOP CDM 5.2 schema.
        externalDocs:
          description: OMOP CDM 5.2 schema definition
          url: https://github.com/OHDSI/CommonDataModel/blob/v5.2.0/PostgreSQL/OMOP%20CDM%20ddl%20-%20PostgreSQL.sql                          
        type: string
      columns:
        description: >
          An array of columns to retrieve from the table, taken from the table specified above.
          Defaults to all columns.
        type: array
        items:
          type: string
      filters:
        description: >
          Filters on the results. Only results matching the criteria specified in the filters
          will be returned. If both filters and conceptSetName are specified, results must match
          both.
        $ref: "#/definitions/ResultFilters"
      conceptSetName:
        description: >
          A name of a concept set in the workspace used to filter results; results must match one
          of the concepts in the named concept set. If both filters and conceptSetName are
          specified, results must match both.
        type: string
      orderBy:
        description: >
          An array of columns to sort the resulting data by, taken from the table specified above,
          each one optionally enclosed in "DESCENDING()" for descending sort order.
          Default sort order is "person_id" (in ascending order) followed by the ID of the specified
          table (in ascending order.)
        type: array
        items:
          type: string

  AnnotationQuery:
    type: object
    description: >
      A specification for retrieving annotation values or review statuses entered for participants.
    properties:
      columns:
        description: >
          An array of names of annotations to retrieve about participants, or "review_status" for
          the cohort review status of the participant or "person_id" for the
          ID of the participant. Defaults to "person_id", "review_status", and the names of all
          defined annotations in the cohort review. This is only valid in combination with the use
          of cohortName above. Only data for participants in the cohort review will be returned;
          if no cohort review has been created, no results will be returned.
        type: array
        items:
          type: string
      orderBy:
        description: >
          An array of names of annotations, or "review status" or "person_id",
          each one optionally enclosed in "DESCENDING()" for descending
          sort order. Specifies the order that results should be returned. Defaults to "person_id"
          (in ascending order). Annotations referenced in orderBy must also be present in columns.
        type: array
        items:
          type: string

  ResultFilters:
    type: object
    description: >
      A list of filters applied to the results of a query. Only results matching the filter criteria
      should be returned. Exactly one of "allOf", "anyOf", and "columnFilter" should be set.
    properties:
      if_not:
        description: >
         Set to true if a result matching allOf or anyOf below should result in a result *not*
         being returned.
        type: boolean
      allOf:
        description: >
          A list of result filters. All filters matching means a result should be returned (or not returned
          if "not" is true.)
        type: array
        items:
          $ref: "#/definitions/ResultFilters"
      anyOf:
        description: >
          A list of column filters. Any filters matching means a result should be returned
          (or not returned if "not" is true.)
        type: array
        items:
          $ref: "#/definitions/ResultFilters"
      columnFilter:
        description: >
          A filter on a column in the table. Only a result matching this filter should be returned
          (or not returned if "not" is true.)
        $ref: "#/definitions/ColumnFilter"

  ColumnFilter:
    type: object
    required:
      - columnName
    description: >
      A filter applied to the results of a query, based on a column value in a table. Only results
      matching the filter will be returned. One (and only one) of the value columns should be populated.
      values and valueNumbers should only be used in conjunction with the "in" operator.
    properties:
      columnName:
        description: >
          The name of the column to filter on.
        type: string
      operator:
        description: >
          The operator to use when comparing values. Defaults to EQUAL. If the "in" operator is used,
          either values or valueNumbers should be populated.
        $ref: "#/definitions/Operator"
        externalDocs:
          description: "Documentation of BigQuery SQL operators"
          url: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#comparison-operators
      value:
        description: >
          A string to use in comparisons (case-sensitive).
        type: string
      values:
        description: >
          An array of strings to use in comparisons (case-sensitive); used with the "in" operator.
        type: array
        items:
          type: string
      valueDate:
        description: >
          A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value to use in comparisons.
        type: string
      valueNumber:
        description: >
          A number to use in comparisons (either integer or floating point.)
        type: number
      valueNumbers:
        description: >
          An array of numbers to use in comparisons (used with the "in" operator)
        type: array
        items:
          type: number
      valueNull:
        description: >
          Set to true if the column value should be compared to null.
        type: boolean

  CohortStatus:
    type: string
    description: possible values indicating whether participants are in or out of the cohort
    enum: [EXCLUDED, INCLUDED, NEEDS_FURTHER_REVIEW, NOT_REVIEWED]

  Operator:
    type: string
    enum: [EQUAL, NOT_EQUAL, LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUAL_TO, GREATER_THAN_OR_EQUAL_TO, LIKE, IN, BETWEEN]

  StandardConceptFilter:
    type: string
    description: filter on whether standard, non-standard, or all concepts should be returned\
    enum: &STANDARD_CONCEPT_FILTER [ALL_CONCEPTS, STANDARD_CONCEPTS, NON_STANDARD_CONCEPTS, STANDARD_OR_CODE_ID_MATCH]

  MatchType:
    type: string
    description: match column type on concept search
    enum: [CONCEPT_CODE, CONCEPT_ID, CONCEPT_NAME]

  Concept:
    description: A concept describing a type of entity (e.g. measurement, observation, procedure.)
    type: object
    required:
      - conceptId
      - conceptName
      - domainId
      - vocabularyId
      - conceptCode
      - conceptClassId
      - standardConcept
      - countValue
      - prevalence

    properties:
      conceptId:
        description: ID of the concept
        type: integer
        format: int64
      conceptName:
        description: Name of the concept
        type: string
      domainId:
        description: Domain ID of the concept (e.g. Observation)
        type: string
      vocabularyId:
        description: Vocabulary ID of the concept (e.g. SNOMED)
        type: string
      conceptCode:
        description: Code for the concept in its vocabulary (e.g. G8107)
        type: string
      conceptClassId:
        description: Class of the concept (e.g. Ingredient)
        type: string
      standardConcept:
        description: True if this is a standard concept, false otherwise
        type: boolean
      countValue:
        description: Count of participants matching this concept in the CDR
        type: integer
        format: int64
      prevalence:
        description: Prevalence among participants in the CDR (a percentage of the total)
        type: number
        format: float
      conceptSynonyms:
        description: concept synonym names
        type: "array"
        items:
          type: "string"

  ConceptSynonym:
    type: object
    description: concept synonym
    required:
      - conceptId
      - conceptSynonymName
      - languageConceptId

    properties:
      conceptId:
        description: concept id
        type: integer
        format: int64
      conceptSynonymName:
        description: concept synonym name
        type: string
      languageConceptId:
        description: language concept id
        type: integer
        format: int64

  SearchConceptsRequest:
    type: object
    properties:
      query:
        type: string
        description: >
          A query string that can be used to match a subset of the name (case-insensitively),
          the entire code value (case-insensitively), or the concept ID. If not specified, all
          concepts are returned.
      standardConceptFilter:
        description: >
          STANDARD_CONCEPTS if only standard concepts should be returned,
          NON_STANDARD_CONCEPTS if only non-standard
          concepts should be returned; defaults to ALL_CONCEPTS, meaning both
          standard and non-standard concepts will be returned.
        $ref: "#/definitions/StandardConceptFilter"
      vocabularyIds:
        type: array
        items:
          type: string
        description: The vocabulary ID for the concepts returned (e.g. SNOMED, RxNorm)
      domain:
        description: >
          The domain for the concepts returned (e.g. OBSERVATION, DRUG). Note that this may map
          to multiple domain ID values in OMOP.
        $ref: "#/definitions/Domain"
      maxResults:
        type: integer
        format: int32
        description: The maximum number of results returned. Defaults to 20.
      minCount:
        type: integer
        format: int32
        description: Determines the concepts to be fetched. Gets all the concepts if 0 or gets concepts with counts if 1.

  ConceptListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Concept"
      domainCounts:
        type: "array"
        items:
          $ref: "#/definitions/DomainCount"
      vocabularyCounts:
        type: "array"
        items:
          $ref: "#/definitions/VocabularyCount"

  DomainCount:
    type: object
    required:
      - domain
      - name
      - concept_count
    properties:
      domain:
        description: the domain ID
        $ref: "#/definitions/Domain"
      name:
        description: display name of the domain
        type: string
      concept_count:
        description: number of concepts matching the search query in this domain
        type: integer
        format: int64

  VocabularyCount:
    type: object
    required:
      - vocabularyId
      - concept_count
    properties:
      vocabularyId:
        description: ID / display name of the vocabulary
        type: string
      concept_count:
        description: number of concepts matching the search query in this vocabulary
        type: integer
        format: int64


